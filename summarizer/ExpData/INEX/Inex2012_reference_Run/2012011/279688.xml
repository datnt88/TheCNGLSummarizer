<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:41:52[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<idea  confidence="0.8" wordnetid="105833840">
<concept  confidence="0.8" wordnetid="105835747">
<header>
<title>Pattern matching</title>
<id>279688</id>
<revision>
<id>238889143</id>
<timestamp>2008-09-16T21:19:50Z</timestamp>
<contributor>
<username>Ghettoblaster</username>
<id>6603820</id>
</contributor>
</revision>
<categories>
<category>Articles with example Haskell code</category>
<category>Conditional constructs</category>
<category>Pattern matching</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, <b>pattern matching</b> is the act of checking for the presence of the constituents of a given <link xlink:type="simple" xlink:href="../351/68351.xml">
pattern</link>. In contrast to <link xlink:type="simple" xlink:href="../706/126706.xml">
pattern recognition</link>, the pattern is rigidly specified. Such a pattern concerns conventionally either <link xlink:type="simple" xlink:href="../701/27701.xml">
sequence</link>s or <link xlink:type="simple" xlink:href="../821/41821.xml">
tree structure</link>s. Pattern matching is used to test whether things have a desired structure, to find relevant structure, to retrieve the aligning parts, and to substitute the matching part with something else.
Sequence (or specifically text string) patterns are often described using <link xlink:type="simple" xlink:href="../717/25717.xml">
regular expression</link>s (i.e. <link xlink:type="simple" xlink:href="../867/238867.xml">
backtracking</link>) and matched using respective algorithms. Sequences can also be seen as trees branching for each element into the respective element and the rest of the sequence, or as trees that immediately branch into all elements.<p>

Tree patterns can be used in <link xlink:type="simple" xlink:href="../015/23015.xml">
programming language</link>s as a general tool to process data based on its structure. Some <link xlink:type="simple" xlink:href="../933/10933.xml">
functional programming language</link>s such as <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../630/13630.xml">
Haskell</link></programming_language>
, <link xlink:type="simple" xlink:href="../607/20607.xml">
ML</link> and the symbolic mathematics language <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../024/49024.xml">
Mathematica</link></software>
 have a special syntax for expressing tree patterns and a language construct for <link xlink:type="simple" xlink:href="../839/462839.xml">
conditional execution</link> and value retrieval based on it. For simplicity and efficiency reasons, these tree patterns lack some features that are available in regular expressions. Depending on the languages, pattern matching can be used for function arguments, in case expressions, whenever new variables are bound, or in very limited situations such as only for sequences in assignment (in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../862/23862.xml">
Python</link></programming_language>
). Often it is possible to give alternative patterns that are tried one by one, which yields a powerful <link xlink:type="simple" xlink:href="../839/462839.xml">
conditional programming construct</link>. Pattern matching can benefit from <link xlink:type="simple" xlink:href="../249/1186249.xml">
guard</link>s.</p>
<p>

<link xlink:type="simple" xlink:href="../847/415847.xml">
Term rewriting</link> languages rely on pattern matching for the fundamental way a program evaluates into a result. Pattern matching benefits most when the underlying datastructures are as simple and flexible as possible. This is especially the case in languages with a strong symbolic flavor. In <link>
symbolic programming language</link>s, patterns are the same kind of datatype as everything else, and can therefore be fed in as arguments to functions.</p>

<sec>
<st>
 Primitive patterns </st>

<p>

The simplest pattern in pattern matching is an explicit value or a variable. For an example, consider a simple function definition in Haskell syntax (function parameters are not in parentheses but are separated by spaces, = is not assignment but definition):</p>
<p>

f 0 = 1</p>
<p>

Here, 0 is a single value pattern. Now, whenever f is given 0 as argument the pattern matches and the function returns 1. With any other argument, the matching and thus the function fail. As the syntax supports alternative patterns in function definitions, we can continue the definition extending it to take more generic arguments:</p>
<p>

f n = n * f (n-1)</p>
<p>

Here, the first n is a single variable pattern, which will match absolutely any argument and bind it to name n to be used in the rest of the definition. In Haskell (unlike at least <link xlink:type="simple" xlink:href="../188/933188.xml">
Hope</link>), patterns are tried in order so the first definition still applies in the very specific case of the input being 0, while for any other argument the function returns n * f (n-1) with n being the argument.</p>
<p>

The wildcard pattern (often written as _) is also simple: like a variable name, it matches any value, but does not bind the value to any name.</p>

</sec>
<sec>
<st>
 Tree patterns </st>



<p>

More complex patterns can be built from the primitive ones of the previous section, usually in the same way as values are built by combining other values. The difference then is that with variable and wildcard parts, a pattern doesn't build into single value, but matches a group of values that are the combination of the concrete elements and the elements that are allowed to vary within the structure of the pattern.</p>
<p>

A tree pattern describes a part of a tree by starting with a node and specifying some branches and nodes and leaving some unspecified with a variable or wildcard pattern. It may help to think of the <link xlink:type="simple" xlink:href="../629/75629.xml">
abstract syntax tree</link> of a programming language and <link xlink:type="simple" xlink:href="../867/283867.xml">
algebraic data type</link>s.</p>
<p>

In Haskell, the following line defines an algebraic data type Color that has a single data constructor ColorConstructor that wraps an integer and a string.
data Color = ColorConstructor Integer String</p>
<p>

The constructor is a node in a tree and the integer and string are leaves in branches. </p>
<p>

When we want to write <link xlink:type="simple" xlink:href="../988/40988.xml">
function</link>s to make Color an <link xlink:type="simple" xlink:href="../ury/24th_century.xml">
abstract data type</link>, we wish to write functions to <link xlink:type="simple" xlink:href="../746/620746.xml">
interface</link> with the data type, and thus we want to extract some data from the data type, for example, just the string or just the integer part of Color.</p>
<p>

If we pass a variable that is of type Color, how can we get the data out of this variable? For example, for a function to get the integer part of Color, we can use a simple tree pattern and write:
integerPart (ColorConstructor theInteger _) = theInteger</p>
<p>

As well:
stringPart (ColorConstructor _ theString) = theString</p>
<p>

The creations of these functions can be automated by Haskell's data record syntax.</p>

</sec>
<sec>
<st>
 Filtering data with patterns </st>

<p>

Pattern matching can be used to filter data of a certain structure. For instance, in Haskell a list comprehension could be used for this kind of filtering:</p>
<p>

[A x | A x - [A 1, B 1, A 2, B 2]]</p>
<p>

evaluates to
[A 1, A 2]</p>

</sec>
<sec>
<st>
 Pattern matching in Mathematica </st>

<p>

In <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../024/49024.xml">
Mathematica</link></software>
, the only structure that exists is the <link xlink:type="simple" xlink:href="../806/30806.xml">
tree</link>, which is populated by symbols. In the <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../630/13630.xml">
Haskell</link></programming_language>
 syntax used thus far, this could be defined as
data SymbolTree = Symbol String [Symbol] 
An example tree could then look like
Symbol "a" [Symbol "b" [], Symbol "c" ] </p>
<p>

In the traditional, more suitable syntax, the symbols are written as they are and the levels of the tree are represented using , so that for instance a[b,c] is a tree with a as the parent, and b and c as the children.</p>
<p>

A pattern in Mathematica involves putting "_" at positions in that tree. For instance, the pattern</p>
<p>

A[_] </p>
<p>

Will match elements such as A[1], A[2], or more generally A[''x''] where <it>x</it> is any entity. In this case, A is the concrete element, while _ denotes the piece of tree that can be varied. A symbol prepended to _ binds the match to that variable name while a symbol appended to _ restricts the matches to nodes of that symbol.</p>
<p>

The Mathematica function Cases filters elements of the first argument that match the pattern in the second argument:</p>
<p>

Cases[{a[1], b[1], a[2], b[2]}, a[_] ]</p>
<p>

evaluates to</p>
<p>

{a[1], a[2]}</p>
<p>

Pattern matching applies to the <it>structure</it> of expressions. In the example below,</p>
<p>

Cases[{a[b], a[b,c], a[b[c], d], a[b[c], d[e], a[b[c], d, e]}, a[b[_],_]]</p>
<p>

returns </p>
<p>

{a[b[c],d], a[b[c],d[e]}</p>
<p>

because only these elements will match the pattern a[b[_],_] above.</p>
<p>

In Mathematica, it is also possible to extract structures as they are created in the course of computation, regardless of how or where they appear. The function Trace can be used to monitor a computation, and return the elements that arise which match a pattern. For example, we can define the <link xlink:type="simple" xlink:href="../918/10918.xml">
Fibonacci sequence</link> as</p>
<p>

fib[0|1]:=1
fib[n_]:= fib[n-1] + fib[n-2]</p>
<p>

Then, we can ask the question: Given fib[3], what is the sequence of recursive Fibonacci calls?</p>
<p>

Trace[fib[3], fib<link>
_</link></p>
<p>

returns a structure that represents the occurrences of the pattern fib[_] in the computational structure:</p>
<p>

{fib[3],{fib[2],{fib[1]},{fib[0]}},{fib[1]}}</p>

<ss1>
<st>
 Declarative programming </st>

<p>

In symbolic programming languages, it is easy to have patterns as arguments to functions or as elements of data structures. A consequence of this is the ability to use patterns to declaratively make statements about pieces of data and to flexibly instruct functions how to operate.</p>
<p>

For instance, the <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../024/49024.xml">
Mathematica</link></software>
 function Compile can be used to make more efficient versions of the code. In the following example the details do not particularly matter; what matters is that the subexpression  instructs Compile that expressions of the form com[_] can be assumed to be <link xlink:type="simple" xlink:href="../563/14563.xml">
integer</link>s for the purposes of compilation:</p>
<p>

com[i_] := Binomial[2i, i]
Compile[{x, {i, _Integer}}, x^com[i], ]</p>
<p>

Mailboxes in <link xlink:type="simple" xlink:href="../646/9646.xml">
Erlang</link> also work this way.</p>

</ss1>
</sec>
<sec>
<st>
 Pattern matching and strings </st>

<p>

By far the most common form of pattern matching involves strings of characters. In many programming languages, a particular syntax of strings is used to represent regular expressions, which are patterns describing string characters.</p>
<p>

However, it is possible to perform some string pattern matching within the same framework that has been discussed throughout this article.</p>

<ss1>
<st>
 Tree patterns for strings </st>

<p>

In Mathematica, strings are represented as trees of root StringExpression and all the characters in order as children of the root. Thus, to match "any amount of trailing characters", a new wildcard ___ is needed in contrast to _ that would match only a single character.</p>
<p>

In Haskell and functional programming languages in general, strings are represented as functional <link xlink:type="simple" xlink:href="../382/208382.xml">
list</link>s of characters. A functional list is defined as an empty list, or an element constructed on an existing list. In Haskell syntax:
      -- an empty list
x:xs    -- an element x constructed on a list xs</p>
<p>

The structure for a list with some elements is thus element:list. When pattern matching, we assert that a certain piece of data is equal to a certain pattern. For example, in the function:
head (element:list) = element</p>
<p>

we assert that the first element of head's argument is called element, and the function returns this. We know that this is the first element because of the way lists are defined, a single element constructed onto a list. This single element must be the first. The empty list would not match the pattern at all, as an empty list does not have a head (the first element that is constructed). </p>
<p>

In the example, we have no use for list, so we can disregard it, and thus write the function:
head (element:_) = element</p>
<p>

The equivalent Mathematica transformation is expressed as </p>
<p>

head[element_, ___]:=element</p>

</ss1>
<ss1>
<st>
 Example string patterns </st>

<p>

In Mathematica, for instance,</p>
<p>

StringExpression["a", _]</p>
<p>

will match a string that has two characters and begins with "a".</p>
<p>

The same pattern in Haskell:</p>
<p>

['a', _]</p>
<p>

Symbolic entities can be introduced to represent many different classes of relevant features of a string. For instance,</p>
<p>

StringExpression[LetterCharacter, DigitCharacter]</p>
<p>

will match a string that consists of a letter first, and then a number.</p>
<p>

In Haskell, <link xlink:type="simple" xlink:href="../249/1186249.xml">
guard</link>s could be used to achieve the same matches:</p>
<p>

[letter, digit] | isAlpha letter &amp;&amp; isDigit digit</p>
<p>

The main advantage of symbolic string manipulation is that it can be completely integrated with the rest of the programming language, rather than being a separate, special purpose subunit. The entire power of the language can be leveraged to built up the patterns themselves or analyze and transform the programs that contain them.</p>

</ss1>
</sec>
<sec>
<st>
 History </st>


<p>

The first computer programs to use pattern matching were text editors. At <link xlink:type="simple" xlink:href="../712/3712.xml">
Bell Labs</link>, <link xlink:type="simple" xlink:href="../747/10817747.xml">
Ken Thompson</link> extended the seeking and replacing features of the <link xlink:type="simple" xlink:href="../256/25256.xml">
QED editor</link> to accept <link xlink:type="simple" xlink:href="../717/25717.xml">
regular expression</link>s. Early programming languages with pattern matching constructs include <link xlink:type="simple" xlink:href="../515/29515.xml">
SNOBOL</link> from 1962, <link xlink:type="simple" xlink:href="../198/1298198.xml">
SASL</link> from 1976, <link xlink:type="simple" xlink:href="../982/948982.xml">
NPL</link> from 1977, and <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../224/17224.xml">
KRC</link></programming_language>
 from 1981. The first programming language with tree-based pattern matching features was Fred McBride's extension of LISP, in 1970.<weblink xlink:type="simple" xlink:href="http://www.cs.nott.ac.uk/~ctm/view.ps.gz">
http://www.cs.nott.ac.uk/~ctm/view.ps.gz</weblink></p>

<p>

<indent level="1">

<it>See also: <message wordnetid="106598915" confidence="0.8">
<subject wordnetid="106599788" confidence="0.8">
<language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../717/25717.xml#xpointer(//*[./st=%22History%22])">
Regular expression#History</link></language>
</subject>
</message>
</it>
</indent>

</p>
<ss1>
<st>
 SNOBOL </st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../515/29515.xml">
SNOBOL</link></it>
</indent>
</p>

</ss1>
</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../706/126706.xml">
Pattern recognition</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 for fuzzy patterns</entry>
<entry level="1" type="bullet">

 <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../742/46742.xml">
AIML</link></format>
 for an AI language based on matching patterns in speech</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../515/29515.xml">
SNOBOL</link> for a programming language based on one kind of pattern matching</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../290/1712290.xml">
PCRE</link> Perl Compatible Regular Expressions, a common modern implementation of string pattern matching ported to many languages</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../432/54432.xml">
Unification</link>, a similar concept in <link xlink:type="simple" xlink:href="../485/23485.xml">
Prolog</link>.</entry>
<entry level="1" type="bullet">

 <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../262/11090262.xml">
Tom (pattern matching language)</link></software>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../117/484117.xml">
glob (programming)</link></entry>
</list>
</p>

</sec>
<sec>
<st>
 References </st>

<p>

<list>
<entry level="1" type="bullet">

 The Mathematica Book, chapter <weblink xlink:type="simple" xlink:href="http://documents.wolfram.com/mathematica/book/section-2.3">
Section 2.3: Patterns</weblink></entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 The Haskell 98 Report, chapter <weblink xlink:type="simple" xlink:href="http://haskell.org/onlinereport/exps.html#pattern-matching">
3.17 Pattern Matching</weblink>.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Python Reference Manual, chapter <weblink xlink:type="simple" xlink:href="http://python.org/doc/2.4.1/ref/assignment.html">
6.3 Assignment statements</weblink>.</entry>
</list>
</p>

</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.haskell.org/tutorial/patterns.html">
A Gentle Introduction to Haskell: Patterns</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.haskell.org/development/views.html">
Views: An Extension to Haskell Pattern Matching</weblink></entry>
<entry level="1" type="bullet">

 Nikolaas N. Oosterhof, Philip K. F. Hölzenspies, and Jan Kuper. <weblink xlink:type="simple" xlink:href="http://wwwhome.cs.utwente.nl/~tina/apm/applPatts.pdf">
Application patterns</weblink>. A presentation at Trends in Functional Programming, 2005</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cs.cornell.edu/Projects/jmatch">
JMatch</weblink>: the Java programming language extended with pattern matching</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://cm.bell-labs.com/cm/cs/who/dmr/qed.html">
An incomplete history of the QED Text Editor</weblink> by Dennis Ritchie - provides the history of regular expressions in computer programs</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://research.microsoft.com/~simonpj/papers/slpj-book-1987/index.htm">
The Implementation of Functional Programming Languages, pages 53-103</weblink> Simon Peyton Jones, published by Prentice Hall, 1987.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://nemerle.org/Grok_Variants_and_matching#Matching">
Nemerle, pattern matching</weblink>.</entry>
</list>
</p>


</sec>
</bdy>
</concept>
</idea>
</article>
